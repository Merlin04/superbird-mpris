syntax = "proto3";

message Empty {}

enum LoopStatus {
  LOOP_STATUS_NONE = 0;
  LOOP_STATUS_TRACK = 1;
  LOOP_STATUS_PLAYLIST = 2;
}

enum Property {
  PROPERTY_CAN_CONTROL = 0;
  PROPERTY_CAN_GO_NEXT = 1;
  PROPERTY_CAN_GO_PREVIOUS = 2;
  PROPERTY_CAN_PAUSE = 3;
  PROPERTY_CAN_PLAY = 4;
  PROPERTY_CAN_SEEK = 5;
  PROPERTY_LOOP_STATUS = 6;
  PROPERTY_MAXIMUM_RATE = 7;
  PROPERTY_METADATA = 8;
  PROPERTY_MINIMUM_RATE = 9;
  PROPERTY_PLAYBACK_STATUS = 10;
  PROPERTY_POSITION = 11;
  PROPERTY_RATE = 12;
  PROPERTY_SHUFFLE = 13;
  PROPERTY_VOLUME = 14;
}

message LoopStatusOptional {
  oneof option {
    Empty none = 1;
    LoopStatus value = 2;
  }
}

message ShuffleOptional {
  oneof option {
    Empty none = 1;
    bool value = 2;
  }
}

message PropertyUpdate {
  enum PlaybackStatus {
    PLAYBACK_STATUS_PLAYING = 0;
    PLAYBACK_STATUS_PAUSED = 1;
    PLAYBACK_STATUS_STOPPED = 2;
  }
  message Metadata {
    // https://www.freedesktop.org/wiki/Specifications/mpris-spec/metadata
    string o_mpris__trackid = 1;
    optional int64 mpris__length = 2;
    optional bytes mpris__art_url_bytes = 3;
    optional string xesam__album = 4;
    repeated string xesam__album_artist = 5;
    repeated string xesam__artist = 6;
    optional string xesam__as_text = 7;
    optional uint32 xesam__audio_bpm = 8;
    optional float xesam__auto_rating = 9; // between 0 and 1
    repeated string xesam__comment = 10;
    repeated string xesam__composer = 11;
    optional string d_xesam__content_created = 12; // ISO 8601 extended format
    optional int32 xesam__disc_number = 13;
    optional string d_xesam__first_used = 14; // ISO 8601 extended format
    repeated string xesam__genre = 15;
    optional string d_xesam__last_used = 16; // ISO 8601 extended format
    repeated string xesam__lyricist = 17;
    optional string xesam__title = 18;
    optional int32 xesam__track_number = 19;
    optional string xesam__url = 20; // might as well include, maybe useful for some things. it's really a URI
    optional uint32 xesam__use_count = 21;
    optional float xesam__user_rating = 22; // between 0 and 1
  }

  oneof property {
    bool can_control = 1; // static
    bool can_go_next = 2;
    bool can_go_previous = 3;
    bool can_pause = 4;
    bool can_play = 5;
    bool can_seek = 6;

    LoopStatusOptional loop_status = 7; // can be written
    double maximum_rate = 8;
    Metadata metadata = 9;
    double minimum_rate = 10;
    PlaybackStatus playback_status = 11;
    int64 position = 12; // won't be announced

    double rate = 13; // can be written
    ShuffleOptional shuffle = 14; // can be written
    double volume = 15; // can be written
  }
}

message SetLoopStatusRequest {
  LoopStatus loop_status = 1;
}

message SetRateRequest {
  double rate = 1;
}

message SetShuffleRequest {
  bool shuffle = 1;
}

message SetVolumeRequest {
  double volume = 1;
}

message SignalUpdate {
  message Seeked {
    int64 position = 1;
  }

  oneof signal {
    Seeked seeked = 1;
  }
}

message FetchPropertyRequest {
  Property property = 1;
}

message Update {
  oneof update {
    PropertyUpdate property = 1;
    SignalUpdate signal = 2;
  }
}

message OpenUriRequest {
  string uri = 1;
}

message SeekRequest {
  int64 offset = 1;
}

message SetPositionRequest {
  string o_track_id = 1;
  int64 offset = 2;
}

service MPRIS {
  rpc FetchProperty(FetchPropertyRequest) returns (PropertyUpdate);
  rpc Subscribe(Empty) returns (stream Update);

  rpc Next (Empty) returns (Empty);
  rpc OpenUri (OpenUriRequest) returns (Empty);
  rpc Pause (Empty) returns (Empty);
  rpc Play (Empty) returns (Empty);
  rpc PlayPause (Empty) returns (Empty);
  rpc Previous (Empty) returns (Empty);
  rpc Seek (SeekRequest) returns (Empty);
  rpc SetPosition (SetPositionRequest) returns (Empty);
  rpc Stop (Empty) returns (Empty);

  rpc SetLoopStatus (SetLoopStatusRequest) returns (Empty);
  rpc SetRate (SetRateRequest) returns (Empty);
  rpc SetShuffle (SetShuffleRequest) returns (Empty);
  rpc SetVolume (SetVolumeRequest) returns (Empty);

  rpc Ping (Empty) returns (Empty);
}

message RpcCall {
  int64 call_id = 1;
  string name = 2;
  bytes req = 3;
}

message RpcResponse {
  int64 call_id = 1;
  optional bytes res = 2;
}